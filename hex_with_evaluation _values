from termcolor import colored
import random
import copy
import tkinter as tk
from functools import partial
import math
ALPHABET = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P",
                "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

class Hex_Game:
        def __init__(self, board_size):
                self.board_size = board_size
                self.create_board()

        def create_board(self):
                self.hex_states = {}
                self.move_options = []
                P1_b_hex_value = 7
                board_middle = self.board_size//2
                for y in range(self.board_size):
                        y_coord = str(y+1)
                        self.hex_states[y_coord] = {}
                        P2_r_hex_value = 7
                        for x in range(self.board_size):
                                x_coord = ALPHABET[x]
                                if x == (board_middle) and y == (board_middle):
                                    h1 = 17
                                    h2 = 17
                                else:
                                    h1 = P1_b_hex_value
                                    h2 = P2_r_hex_value
                                
                                self.hex_states[y_coord][x_coord] = ["⬡", h1, h2]
                                self.move_options.append((x_coord,y_coord))
                                if x >= (board_middle):
                                    P2_r_hex_value -=1
                                else:
                                    P2_r_hex_value +=1
                            
                        if y >= (board_middle):
                            P1_b_hex_value -=1
                        else:
                            P1_b_hex_value +=1
                        print(self.hex_states)


        def reset_board(self):
                self.create_board()

        def _print_all_possible_moves(self):
                print("The possible moves are: " + str(self.move_options))

        def _print_played_moves(self):
                print("The played moves are: " + str(self.played_moves))

        def _print_current_round(self):
                print("The current round is: " + str(self.current_round))

        def _print_winner(self):
                print(self.current_player + " is the winner!!!!")

        def get_move_x_and_y(self, move):
                return move[0], move[1]

        def check_who_placed(self, move):
                move_x, move_y = self.get_move_x_and_y(move)
                hexagon = self.hex_states[move_y][move_x][0]
                return self.check_move(hexagon)

        def check_move(self, hexagon):
                if hexagon == "⬡":
                        return "Neither"
                elif hexagon == colored("⬢", "blue"):
                        return "P1"
                elif hexagon == colored("⬢", "red"):
                        return "P2"

        def increment_x(self, x_value):
                return ALPHABET.index(x_value)+1
        
        def decrement_x(self, x_value):
                return ALPHABET.index(x_value)-1

        def index_x(self, x_value):
                return ALPHABET.index(x_value)
        
        def increment_y(self, y_value):
                return str(int(y_value) + 1)
        
        def decrement_y(self, y_value):
                return str(int(y_value) - 1)

        def is_valid_move(self, move_x, move_y):
                if move_x != -1 and move_x != self.board_size and move_y != "0" and move_y != str(self.board_size +1):
                        return True
                return False

        def check_placement(self, move):
                who_placed  = self.check_who_placed(move)
                if who_placed == self.who_placed_first_move_in_sequence:
                        return True
                return False

        def case_1(self, move_x, move_y):
                #case 1 above
                move_x = self.index_x(move_x)
                move_y = self.decrement_y(move_y)
                return move_x, move_y

        def case_2(self, move_x, move_y):
                #case 2 upper right
                move_x = self.increment_x(move_x)
                move_y = self.decrement_y(move_y)
                return move_x, move_y

        def case_3(self, move_x, move_y):
                #case 3 lower right
                move_x = self.increment_x(move_x)
                return move_x, move_y

        def case_4(self, move_x, move_y):
                #case 4 below
                move_x = self.index_x(move_x)
                move_y = self.increment_y(move_y)
                return move_x, move_y

        def case_5(self, move_x, move_y):
                #case 5 lower left
                move_x = self.decrement_x(move_x)
                move_y = self.increment_y(move_y)
                return move_x, move_y

        def case_6(self, move_x, move_y):
                #case 6 upper left
                move_x = self.decrement_x(move_x)
                return move_x, move_y


        def add_to_reachable(self, most_recent_move, all_reachable):
                #recursive function

                if most_recent_move not in self.played_moves:
                       return
                
                all_reachable.add(most_recent_move)
                most_recent_move_x = most_recent_move[0]
                most_recent_move_y = most_recent_move[1]

                for case in range(1,7):
                        if case == 1:
                                move_x, move_y = self.case_1(most_recent_move_x, most_recent_move_y)
                        elif case == 2:
                                move_x, move_y = self.case_2(most_recent_move_x, most_recent_move_y)
                        elif case == 3:
                                move_x, move_y = self.case_3(most_recent_move_x, most_recent_move_y)
                        elif case == 4:
                                move_x, move_y = self.case_4(most_recent_move_x, most_recent_move_y)
                        elif case == 5:
                                move_x, move_y = self.case_5(most_recent_move_x, most_recent_move_y)
                        elif case == 6:
                                move_x, move_y = self.case_6(most_recent_move_x, most_recent_move_y)

                        move = (ALPHABET[move_x], move_y) 
                        if move not in all_reachable and self.is_valid_move(move_x, move_y):
                                to_add = self.check_placement(move)
                                if to_add == True:
                                        self.add_to_reachable(move, all_reachable)

        def surrounding_hexs(self, move):
               move_y = move[1]
               move_x = move[0]
               left_hex = chr(ord(move[0])-1)
               right_hex = chr(ord(move[0])+1)
               lower_y = str(int(move[1])+1)
               top_y = str(int(move[1])-1)
               
               hexes = []
               
               if move_x != ALPHABET[0]: # not in leftmost column
                      hexes.append((left_hex, move_y))
                
               if move_x != ALPHABET[0] and move_y != '1':  #not in top left, leftmost column
                      hexes.append((left_hex, top_y))

               if move_x != ALPHABET[self.board_size-1]: #Not in rightmost column
                      hexes.append((right_hex, move_y))
               
               if move_x != ALPHABET[self.board_size-1] and move_y != str(self.board_size): #not in bottom right, rightmost column
                      hexes.append((right_hex, lower_y)) 

               if move_x != ALPHABET[self.board_size-1] and move_y != '1': #not in rightmost column and top right
                      hexes.append((move_x, top_y))
                
               if move_x != ALPHABET[0] and move_y != str(self.board_size): #not in leftmost column and bottom left
                      hexes.append((move_x, lower_y))

               return hexes



        def determine_if_winner(self, most_recent_move):
                #most recent move as ("A", 1) x,y
                all_reachable = set()

                self.who_placed_first_move_in_sequence = self.check_who_placed(most_recent_move)

                self.add_to_reachable(most_recent_move, all_reachable)
                #print(all_reachable)
        
                if self.current_player == "P1":
                        x_coords = []
                        for value in all_reachable:
                                x_coords.append(value[0])
                        unique_x_coords = set(x_coords)
                        print(unique_x_coords)
                        #if "A" in unique_x_coords and ALPHABET[self.board_size-1] in unique_x_coords:
                        if len(unique_x_coords) == self.board_size:
                                self.winner_exists = True
                
                
                elif self.current_player == "P2": 
                        y_coords = []
                        for value in all_reachable:
                                y_coords.append(value[1])
                        unique_y_coords = set(y_coords)
                        print(unique_y_coords)
                        #if "1" in unique_y_coords and str(self.board_size) in unique_y_coords:
                        if len(unique_y_coords) == self.board_size:
                                self.winner_exists = True
                

        def print_board(self):
                header = colored("".join(ALPHABET[:self.board_size]),"red")
                board = header+"\n"
                spacer = ""
                for key, value in self.hex_states.items():
                        #print(key, "and", value)
                        board += spacer
                        board += colored(str(key), "blue")
                        for key_2, value_2 in self.hex_states[key].items():
                                board += value_2[0]
                        board += colored(str(key), "blue")
                        board += "\n"
                        if int(key) != 9:
                                spacer += " "
                board += spacer + header
                print(board)
        

        def get_move(self):
                #can take as A,1  or A1 or a,1 or a1
                move = input(self.current_player + " pick a move: ")
                
                if "," in move:
                        move = tuple(move.split(","))
                else:
                        move = (move[0], move[1:])
                move = (move[0].upper(), move[1])
                while move not in self.move_options:
                        move = input("Pick a new move: ")
                        if "," in move:
                                move = tuple(move.split(","))
                        else:
                                move = (move[0], move[1:])
                        move = (move[0].upper(), move[1])
                return move
        
        def get_possible_moves(self):
               return self.move_options.copy()
        
        #sorts moves for minimax so its less work to see the max or min moves that can benefit them
        def sort_moves(self, possible_moves, player):
               return sorted(possible_moves, key=lambda move: self.move_value(move, player), reverse=True)

        #checks value of a move 
        def move_value(self, move, player):
               move_y = move[1]
               move_x = move[0]
               p1_h = 1
               p2_h = 2
               
               if player == "P1":
                      return self.hex_states[move_y][move_x][p1_h]
               else:
                      return self.hex_states[move_y][move_x][p2_h]

        def random_move(self):
                move = random.choice(self.move_options)
                #print("The move:", move)
                return move
        
        def update_h_if_empty(self, move_y, move_x, player):
               if self.hex_states[move_y][move_x][0] == "⬡":
                      if player == "P1":
                             self.hex_states[move_y][move_x][1] += 7 #addes to hex value 5 seems to be pretty good we can test with different values to see which does best
                             
                      else:
                             self.hex_states[move_y][move_x][2] += 7

        def p1_update_h_value(self, move):
            left_hex = chr(ord(move[0])-1)
            right_hex = chr(ord(move[0])+1)
            lower_y = str(int(move[1])+1)
            top_y = str(int(move[1])-1)

            if move[0] == ALPHABET[0]: #special case the leftmost column
                if int(move[1]) > 1 and int(move[1]) < self.board_size:
                    self.update_h_if_empty(top_y, right_hex, "P1")

                self.update_h_if_empty(move[1], right_hex, "P1")
            elif move[0] == ALPHABET[self.board_size-1]: #special case the rightmost column
                if int(move[1]) > 1 and int(move[1]) < self.board_size:
                    self.update_h_if_empty(lower_y,left_hex, "P1")
                    
                self.update_h_if_empty(move[1], left_hex, "P1")
            else: #middle columns
                if move[1] != '1':  #not the top row
                    self.update_h_if_empty(top_y, right_hex, "P1")
                if move[1] != str(self.board_size): #not the bottom row
                    self.update_h_if_empty(lower_y, left_hex, "P1")

                self.update_h_if_empty(move[1], left_hex, "P1")
                self.update_h_if_empty(move[1], right_hex, "P1")


        def p2_update_h_value(self, move):
            top_y = str(int(move[1])-1)
            lower_y =  str(int(move[1])+1)
            left_hex = chr(ord(move[0])-1)
            right_hex = chr(ord(move[0])+1)

            if move[1] == '1': # special case bottom row
                if move[0] != ALPHABET[0] and move[0] != ALPHABET[self.board_size-1]:
                    self.update_h_if_empty(lower_y,left_hex, "P2")

                self.update_h_if_empty(lower_y,move[0], "P2")   

            elif move[1] == str(self.board_size): #special case top row
                if move[0] != ALPHABET[0] and move[0] != ALPHABET[self.board_size-1]:
                    self.update_h_if_empty(top_y, right_hex, "P2")

                self.update_h_if_empty(top_y,move[0], "P2")
            else: #middle rows
                if move[0] != ALPHABET[self.board_size-1]: #not in rightmost column
                    self.update_h_if_empty(top_y, right_hex, "P2")
                if move[0] != ALPHABET[0]: #not in leftmost column
                    self.update_h_if_empty(lower_y, left_hex, "P2")

                self.update_h_if_empty(top_y, move[0], "P2")    
                self.update_h_if_empty(lower_y, move[0], "P2")



        def player_move(self, move):
                move_x = move[0]
                move_y = move[1]
                if self.current_player == "P1":
                        self.hex_states[move_y][move_x][0] = colored("⬢", "blue")
                        self.p1_update_h_value(move)
                        #print(self.hex_states)

                elif self.current_player == "P2":
                        self.hex_states[move_y][move_x][0] = colored("⬢", "red")
                        self.p2_update_h_value(move)
                       # print(self.hex_states)
                        
                self.print_board()
                #print("Move:", move)
                #self._print_all_possible_moves()
                self.move_options.remove(move)
                self.played_moves.add(move)

        def simulate_move(self, move, player):
                if player == "P1":
                      color = "blue"
                else:
                    color = "red"

                move_y = move[1]
                move_x = move[0]

                self.hex_states[move_y][move_x][0] = colored("⬢", color)
                
                #if player == "P1":
                #      self.p1_update_h(move)
                #else:
                #       self.p2_update_h(move)
                #self.move_options.remove(move)

        def undo_sim_move(self, move):
               move_y = move[1]
               move_X = move[0]

               self.hex_states[move_y][move_X][0] = "⬡"
               #self.move_options.append(move)
                
        def swap_current_player(self):
                if self.current_player == "P2":
                        self.current_player = "P1"
                else:
                        self.current_player = "P2"
              
              

        def player_actions(self, move_func):
                move = move_func()
                print(move)
                #move = str(move[0]) + str(move[1])
                #print(move)
                self.do_actions(move)

        def do_actions(self, move):
                #print(move)
                #move = (move[0],move[1])
                self.player_move(move)
                self.evaluate()
                self.determine_if_winner(move)
                if self.winner_exists == False:
                        self.swap_current_player()

        def swap_move_func(self, move_func, p1_move_func, p2_move_func):
                if move_func == p2_move_func:
                        move_func = p1_move_func
                else:
                        move_func = p2_move_func
                return move_func

        def game(self, p1_move_func, p2_move_func):
                self.current_round = 0
                self.played_moves = set()
                self.winner_exists = False
                self.current_player = "P1"
                move_func = p1_move_func

                while self.winner_exists == False:
                        self.player_actions(move_func)
                
                        if self.winner_exists:
                                self._print_winner()
                                self.reset_board()
                                return self.current_player

                        move_func = self.swap_move_func(move_func, p1_move_func, p2_move_func)
                        self.current_round += 0.5
               
                        
        def play_game(self):
                #player one wins if line left to right and player two if line top to bottom
                self.game(self.get_move, self.ai_move)         

        def simulation(self):
                self.game(self.random_move, self.random_move)   

        def get_segments(self):
                played_moves = set(self.played_moves)
                #key is initial move of segment
                segments = {}
                for move in self.played_moves:
                        if move in played_moves:
                                all_reachable = set()
                                self.who_placed_first_move_in_sequence = self.check_who_placed(move)
                                self.add_to_reachable(move, all_reachable)
                                
                                for reachable_move in all_reachable:
                                        played_moves.remove(reachable_move)

                                segments[move] = all_reachable
                return segments

        def get_player_segment_lengths(self, segments):
                player_segments_lengths = {"P1": {}, "P2": {}}
                for key in segments.keys():
                        player = self.check_who_placed(key)
                        if player == "P1":
                                x_coords = []
                                for value in segments[key]:
                                        x_coords.append(value[0])
                                unique_x_coords = set(x_coords)
                                player_segments_lengths["P1"][key] = len(unique_x_coords)
                                
                        elif player == "P2":
                                y_coords = []
                                for value in segments[key]:
                                        y_coords.append(value[1])
                                unique_y_coords = set(y_coords)
                                player_segments_lengths["P2"][key] = len(unique_y_coords)
                return player_segments_lengths
                

        def evaluate_lengths(self, segments, player_segments_lengths):
                player_totals = {"P1":0, "P2":0}
                
                for key in player_segments_lengths.keys():
                        for value in player_segments_lengths[key].values():
                                player_totals[key] += value * 5    #adds to value based on segment length

                                #also add hex values
                        for segment_start in player_segments_lengths[key].keys():
                               for move in segments[segment_start]:
                                      
                                      for neighbor in self.surrounding_hexs(move):
                                        move_x, move_y = neighbor
                                        if (move_y in self.hex_states and move_x in self.hex_states[move_y] and self.hex_states[move_y][move_x][0] == "⬡"):
                                                if key == "P1":
                                                        h = 1
                                                else:
                                                        h = 2
                                                hex_value = self.hex_states[move_y][move_x][h]
                                                player_totals[key] += hex_value * 2  # addes to value based on hex value of position
                
                #print("Totals: ", player_totals)
                return player_totals

        def evaluate(self):
                segments = self.get_segments()
                player_segments_lengths  = self.get_player_segment_lengths(segments)
                totals = self.evaluate_lengths(segments, player_segments_lengths)
                return totals
        
        def value(self, depth, is_max_agent, ai_player, alpha = -100000, beta = 100000):
               if depth == 0 or self.winner_exists:
                      eval = self.evaluate()
                      print(eval)
                      if ai_player == "P2":
                              return eval["P2"] - eval["P1"], None  #positive values is better for P2(AI)
                      else:
                             return eval["P1"] - eval["P2"], None    
                         
               if is_max_agent: #AI is maximizing player
                      return self.max_value(depth, alpha, beta, ai_player)
               else:
                      return self.min_value(depth, alpha, beta, ai_player)
               
        def max_value(self, depth, alpha, beta, ai_player):
               max_score = -1000000
               best_move = None
               possible_moves = self.get_possible_moves() 
               #sorts moves with high values to min values 
               sorted_moves = self.sort_moves(possible_moves, ai_player)

               for move in sorted_moves:
                      #self.simulate_move(move, "P2")
                      #simulate evaluation increase
                      score, _ = self.value(depth-1, False, ai_player, alpha, beta)
                      #undo evaluation increase
                      #self.undo_sim_move(move)

                      if score > max_score:
                             max_score = score
                             best_move = move

                      alpha = max(alpha, max_score)
                      if beta <= alpha:
                             break
               return max_score, best_move
        
        def min_value(self, depth, alpha, beta, ai_player):
               min_score = 1000000
               best_move = None
               possible_moves = self.get_possible_moves() 
               #sorts moves with min values to high values 
               if ai_player == "P1":
                      max_agent = "P2"
               else:
                      max_agent = "P1" 

               sorted_moves = self.sort_moves(possible_moves, max_agent)
               
               for move in sorted_moves:
                      #self.simulate_move(move,"P1")
                      #simulate evaluation increase##
                      score, _ = self.value(depth-1, True, ai_player, alpha, beta)
                      #undo evaluation increase##
                      #self.undo_sim_move(move)

                      if score < min_score:
                             min_score = score
                             best_move = move
                      beta = min(beta, min_score)
                      if beta <= alpha:
                             break
               return min_score, best_move
        
        def ai_move(self, depth, ai_player):
               _, best_move = self.value(depth, is_max_agent=True, ai_player=ai_player)
               #print(self.move_options)
               return best_move


class Hex_Game_UI(Hex_Game):

        def on_enter(self, item, event=None):
                if self.current_player == "P1":
                        color = "lightblue"
                elif self.current_player == "P2":
                        color = "lightcoral"
                self.canvas.itemconfigure(item, fill=color)

        def on_leave(self, item, event=None):
                self.canvas.itemconfigure(item, fill="white")

        def player_move_ui(self, id):
                #overwrites text based version
                move = (id[0], id[1:])
                print(move)
                return move

        def player_vs_player(self, id):
                if self.winner_exists == False:
                        move = self.player_move_ui(id)
                        self.do_actions(move)
                        self.current_round += 0.5
                if self.winner_exists:
                        self._print_winner()
                        #self.canvas.destroy()
                        self.root.quit()
                        return self.current_player
        
        def ai_vs_player(self, id):
                if self.winner_exists:
                       self._print_winner()
                       #self.canvas.destroy()
                       self.root.quit()
                       return self.current_player
                move = self.player_move_ui(id)
                self.do_actions(move)

                if self.winner_exists == False:
                       ai_move = self.p1_move_func()
                       str_move = str(ai_move[0]) + str(ai_move[1])
                       self.modify_hexagon(self.hexagons[str_move])
                       self.do_actions(ai_move)
                       self.current_round += 0.5

                if self.winner_exists:
                       self._print_winner()
                       #self.canvas.destroy()
                       self.root.quit()
                       return self.current_player
                 
                
        def player_vs_ai(self, id):
                if self.winner_exists:
                       self._print_winner()
                       #self.canvas.destroy()
                       self.root.quit()
                       return self.current_player
                
                if self.current_player == "P1":
                       move = self.player_move_ui(id)
                       self.do_actions(move)

                if self.winner_exists == False and self.current_player == "P2":
                       ai_move = self.p2_move_func()
                       print(ai_move)
                       str_move = str(ai_move[0]) + str(ai_move[1])
                       self.modify_hexagon(self.hexagons[str_move])
                       self.do_actions(ai_move)
                       self.current_round += 0.5

                if self.winner_exists:
                       self._print_winner()
                       #self.canvas.destroy()
                       self.root.quit()
                       return self.current_player


        def time_limit_reached(self):
                print("Time limit reached!")
                self.root.quit()

        def ai_vs_ai(self):
                        move_func = self.p1_move_func
                        while True:
                                if self.winner_exists == False:
                                        move = move_func()
                                        print(move)
                                        str_move = str(move[0]) + str(move[1])
                                        self.modify_hexagon(self.hexagons[str_move])
                                        self.do_actions(move)
                                        self.current_round += 0.5
                                        move_func = self.swap_move_func(move_func, self.p1_move_func, self.p2_move_func)

                                if self.winner_exists:
                                        if self.current_player == "P1":
                                               self.p1_wins += 1
                                        else:
                                               self.p2_wins += 1
                                        self._print_winner()
                                        # Schedule the time_limit_reached function to be called after 10000 milliseconds (10 seconds)
                                        self.root.after(200, self.time_limit_reached)
                                        tk.mainloop()
                                        #self.canvas.destroy()
                                        return self.current_player

        def clicked(self, item, id, event=None):
                self.modify_hexagon(item)
                if self.type == 1:
                        self.player_vs_player(id)
                elif self.type == 2:
                        self.player_vs_ai(id)
                elif self.type == 3:
                       if self.current_player == "P1":
                              return
                       self.ai_vs_player(id)

        def create_hexagon(self, fill="white", outline="black", text="text"):
                points = []
                for i in range(6):
                        angle_rad = math.radians(60 * i)
                        x = self.hex_x + self.hex_size * math.cos(angle_rad)
                        y = self.hex_y + self.hex_size * math.sin(angle_rad)
                        #swap y and x for hexagon with line on top keep for point on top
                        points.append(y)
                        points.append(x)
                hexagon = self.canvas.create_polygon(points, fill=fill, outline=outline)
                self.canvas.tag_bind(hexagon, "<Enter>", partial(self.on_enter, hexagon))
                self.canvas.tag_bind(hexagon, "<Leave>", partial(self.on_leave, hexagon))

                #what clicked does will differ based on type

                self.canvas.tag_bind(hexagon,"<Button-1>",partial(self.clicked, hexagon, text))
                return hexagon

        def create_hexagon_text(self, text, text_color="black", fill="white", outline="black"):
                hexagon = self.create_hexagon(fill, outline, text)
                text_id = self.create_text(text, text_color)
                return hexagon

        def create_text(self, text, text_color="black"):
                text_id = self.canvas.create_text(self.hex_y, self.hex_x, text=text, font=("Arial", self.text_size, "bold"), fill=text_color, anchor="center")

        def modify_hexagon(self, item):
                if self.current_player == "P1":
                        color = "blue"
                elif self.current_player == "P2":
                        color = "red"
                self.canvas.itemconfigure(item, fill=color)
                self.canvas.tag_unbind(item, "<Button-1>")
                self.canvas.tag_unbind(item, "<Enter>")
                self.canvas.tag_unbind(item, "<Leave>")

        def generate_ui(self):

                self.root = tk.Tk()
                self.canvas =tk.Canvas(self.root, width= 700 ,height= 700, bg = 'white')
                self.canvas.pack()

                self.ui_text_color = "black"
                self.hex_size = 200/self.board_size
                self.text_size = int(self.hex_size/2)
                #print(self.hex_size)
                self.hex_x = self.hex_size * 2
                self.hex_y = self.hex_size * 2
                self.hexagons = {}
                shifter = self.hex_y


                for y in range(self.board_size):
                        y_coord = str(y+1)
                        for x in range(self.board_size):
                                x_coord = ALPHABET[x]
                                text = x_coord + y_coord
                                hexagon = self.create_hexagon_text(text=text)
                                self.hexagons[text] = hexagon
                                self.hex_y += self.hex_size*6.9/4
                        self.hex_x += self.hex_size*6/4
                        shifter += self.hex_size*6.9/8
                        self.hex_y = shifter
                
                #add numbers and letters
                self.hex_x = self.hex_size * 2
                self.hex_y = self.hex_size
                for y in range(self.board_size):
                        y_coord = str(y+1)
                        self.create_text(y_coord, "blue")
                        self.hex_x += self.hex_size*6/4
                        self.hex_y += self.hex_size*6.4/8
                self.hex_y = self.hex_size + self.hex_size*6.2/4*(self.board_size+1)
                self.hex_x = self.hex_size * 2
                for y in range(self.board_size):
                        y_coord = str(y+1)
                        self.create_text(y_coord, "blue")
                        self.hex_x += self.hex_size*6/4
                        self.hex_y += self.hex_size*6.4/8

                self.hex_x = self.hex_size/2
                self.hex_y = self.hex_size*2
                for x in range(self.board_size):
                        x_coord = ALPHABET[x]
                        self.create_text(x_coord, "red")
                        self.hex_y += self.hex_size*1.75

                self.hex_x = self.hex_size/2 + self.hex_size*6/4*(self.board_size+1)
                self.hex_y = self.hex_size + self.hex_size/2.2 + self.hex_size*6.4/8*(self.board_size)
                for x in range(self.board_size):
                        x_coord = ALPHABET[x]
                        self.create_text(x_coord, "red")
                        self.hex_y += self.hex_size*1.75

                self.update_canvas_size()


                if self.type == 3:
                        move = self.p1_move_func()
                        print(move)
                        str_move = str(move[0]) + str(move[1])
                        self.modify_hexagon(self.hexagons[str_move])
                        self.do_actions(move)
                        self.current_round += 0.5
                elif self.type == 4:
                        self.ai_vs_ai()        
                        return

                tk.mainloop()
                #self.canvas.pack_forget()

        def update_canvas_size(self):
                self.canvas.update_idletasks()
                bbox = self.canvas.bbox("all")
                if bbox:
                        self.canvas.config(width=bbox[2] - bbox[0] + self.hex_size * 2, height=bbox[3] - bbox[1] + self.hex_size*2)

        def ui_game(self, type=1, p1_move_func=None, p2_move_func=None):
                #four options for type, 1: player vs player, 2: player vs ai, 3: ai vs player, 4: ai vs ai
                #only need to pass move function for types 2,3, or 4.
                self.current_round = 0
                self.played_moves = set()
                self.winner_exists = False
                self.current_player = "P1"
                self.type = type
                #makes more sense to make self instead of passing like in text-based since works differently
                self.p1_move_func = p1_move_func
                self.p2_move_func = p2_move_func
                self.generate_ui()
                self.reset_board()

        def play_game(self):
                #player one wins if line left to right and player two if line top to bottom
                self.ui_game()  

        def as_p1(self):                                               #depth at 3 fast, 4 not much slower, 5 takes a bit
                self.ui_game(2, p1_move_func=self.get_move, p2_move_func= lambda: self.ai_move(depth=3, ai_player="P2")) 

        def as_p2(self):
                self.ui_game(3, p1_move_func= lambda: self.ai_move(depth=3, ai_player="P1"), p2_move_func=self.get_move)

        def simulation(self, rounds):
                self.p1_wins = 0
                self.p2_wins = 0
                for round in range(rounds):
                       self.ui_game(4, self.random_move, p2_move_func=lambda: self.ai_move(depth=2, ai_player="P2"))
                       #self.ui_game(4, p1_move_func=lambda: self.ai_move(depth=3, ai_player="P1"), p2_move_func=self.random_move)     
                       # self.ui_game(4, self.random_move, self.random_move)
                print(f"Number of rounds: {rounds}")
                print(f"Player 1 number of wins {self.p1_wins}")
                print(f"Player 2 number of wins {self.p2_wins}")
                self.reset_board()

        def reset_board(self):
                self.create_board()
                #self.canvas.destroy()
                self.root.destroy()


if __name__ == "__main__":
        hex = Hex_Game_UI(5)
        hex.simulation(50)
        #hex.as_p2()
         #hex = Hex_Game(
        #hex.play_game()
        #hex.reset_board()
        #hex.play_game()
        #hex.as_p2()
        #hex.simulation()
        #hex.ui_game(type=2, p1_move_func=hex.random_move, p2_move_func=hex.ai_move)
        #hex.reset_board()
        #hex.ui_game_ai()
        #hex.simulation()
        #hex.reset_board()
        #hex.play_game()
